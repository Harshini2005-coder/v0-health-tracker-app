"use client"

import type React from "react"
import { createContext, useContext, useState, useEffect } from "react"

type Language = {
  code: string
  name: string
  flag: string
}

const languages: Language[] = [
  { code: "en", name: "English", flag: "üá∫üá∏" },
  { code: "fr", name: "Fran√ßais", flag: "üá´üá∑" },
  { code: "hi", name: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", flag: "üáÆüá≥" },
  { code: "kn", name: "‡≤ï‡≤®‡≥ç‡≤®‡≤°", flag: "üáÆüá≥" },
  { code: "it", name: "Italiano", flag: "üáÆüáπ" },
  { code: "es", name: "Espa√±ol", flag: "üá™üá∏" },
  { code: "de", name: "Deutsch", flag: "üá©üá™" },
  { code: "pt", name: "Portugu√™s", flag: "üáµüáπ" },
  { code: "ar", name: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", flag: "üá∏üá¶" },
  { code: "zh", name: "‰∏≠Êñá", flag: "üá®üá≥" },
]

type LanguageContextType = {
  currentLanguage: Language
  setLanguage: (language: Language) => void
  translate: (key: string) => string
  speak: (text: string) => void
  isSupported: boolean
  languages: Language[]
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

const translations: Record<string, Record<string, string>> = {
  en: {
    // Navigation
    "nav.dashboard": "Dashboard",
    "nav.medicines": "Medicines",
    "nav.health": "Health",
    "nav.appointments": "Appointments",
    "nav.chat": "AI Assistant",
    "nav.profile": "Profile",

    // Dashboard
    "dashboard.title": "Health Dashboard",
    "dashboard.welcome": "Welcome back",
    "dashboard.todaysMedicines": "Today's Medicines",
    "dashboard.waterIntake": "Water Intake",
    "dashboard.heartRate": "Heart Rate",
    "dashboard.steps": "Steps",
    "dashboard.upcomingAppointment": "Upcoming Appointment",
    "dashboard.scheduleAppointment": "Schedule Appointment",

    // Medicines
    "medicines.title": "Medicine Tracker",
    "medicines.addMedicine": "Add Medicine",
    "medicines.takeMedicine": "Take Medicine",
    "medicines.skipDose": "Skip Dose",
    "medicines.dosage": "Dosage",
    "medicines.frequency": "Frequency",
    "medicines.nextDose": "Next Dose",

    // Health
    "health.title": "Health Monitoring",
    "health.vitals": "Vital Signs",
    "health.activity": "Activity",
    "health.insights": "Health Insights",
    "health.addWater": "Add Water",
    "health.goal": "Goal",
    "health.achieved": "Achieved",

    // AI Chat
    "chat.title": "AI Health Assistant",
    "chat.placeholder": "Ask me about your health, medicines, or scan a prescription...",
    "chat.scanPrescription": "Scan Prescription",
    "chat.voiceInput": "Voice Input",
    "chat.listening": "Listening...",
    "chat.processing": "Processing...",

    // Common
    "common.save": "Save",
    "common.cancel": "Cancel",
    "common.delete": "Delete",
    "common.edit": "Edit",
    "common.loading": "Loading...",
    "common.error": "Error",
    "common.success": "Success",
    "common.today": "Today",
    "common.tomorrow": "Tomorrow",
    "common.yesterday": "Yesterday",
  },
  fr: {
    // Navigation
    "nav.dashboard": "Tableau de bord",
    "nav.medicines": "M√©dicaments",
    "nav.health": "Sant√©",
    "nav.appointments": "Rendez-vous",
    "nav.chat": "Assistant IA",
    "nav.profile": "Profil",

    // Dashboard
    "dashboard.title": "Tableau de bord sant√©",
    "dashboard.welcome": "Bon retour",
    "dashboard.todaysMedicines": "M√©dicaments d'aujourd'hui",
    "dashboard.waterIntake": "Consommation d'eau",
    "dashboard.heartRate": "Rythme cardiaque",
    "dashboard.steps": "Pas",
    "dashboard.upcomingAppointment": "Prochain rendez-vous",
    "dashboard.scheduleAppointment": "Planifier un rendez-vous",

    // Medicines
    "medicines.title": "Suivi des m√©dicaments",
    "medicines.addMedicine": "Ajouter un m√©dicament",
    "medicines.takeMedicine": "Prendre le m√©dicament",
    "medicines.skipDose": "Ignorer la dose",
    "medicines.dosage": "Dosage",
    "medicines.frequency": "Fr√©quence",
    "medicines.nextDose": "Prochaine dose",

    // Health
    "health.title": "Surveillance de la sant√©",
    "health.vitals": "Signes vitaux",
    "health.activity": "Activit√©",
    "health.insights": "Aper√ßus sant√©",
    "health.addWater": "Ajouter de l'eau",
    "health.goal": "Objectif",
    "health.achieved": "Atteint",

    // AI Chat
    "chat.title": "Assistant sant√© IA",
    "chat.placeholder": "Demandez-moi √† propos de votre sant√©, m√©dicaments, ou scannez une ordonnance...",
    "chat.scanPrescription": "Scanner l'ordonnance",
    "chat.voiceInput": "Entr√©e vocale",
    "chat.listening": "√âcoute...",
    "chat.processing": "Traitement...",

    // Common
    "common.save": "Enregistrer",
    "common.cancel": "Annuler",
    "common.delete": "Supprimer",
    "common.edit": "Modifier",
    "common.loading": "Chargement...",
    "common.error": "Erreur",
    "common.success": "Succ√®s",
    "common.today": "Aujourd'hui",
    "common.tomorrow": "Demain",
    "common.yesterday": "Hier",
  },
  hi: {
    // Navigation
    "nav.dashboard": "‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
    "nav.medicines": "‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Ç",
    "nav.health": "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø",
    "nav.appointments": "‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü",
    "nav.chat": "AI ‡§∏‡§π‡§æ‡§Ø‡§ï",
    "nav.profile": "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤",

    // Dashboard
    "dashboard.title": "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
    "dashboard.welcome": "‡§µ‡§æ‡§™‡§∏‡•Ä ‡§™‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§",
    "dashboard.todaysMedicines": "‡§Ü‡§ú ‡§ï‡•Ä ‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Ç",
    "dashboard.waterIntake": "‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§∏‡•á‡§µ‡§®",
    "dashboard.heartRate": "‡§π‡•É‡§¶‡§Ø ‡§ó‡§§‡§ø",
    "dashboard.steps": "‡§ï‡§¶‡§Æ",
    "dashboard.upcomingAppointment": "‡§Ü‡§ó‡§æ‡§Æ‡•Ä ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü",
    "dashboard.scheduleAppointment": "‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡§∞‡•á‡§Ç",

    // Medicines
    "medicines.title": "‡§¶‡§µ‡§æ ‡§ü‡•ç‡§∞‡•à‡§ï‡§∞",
    "medicines.addMedicine": "‡§¶‡§µ‡§æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
    "medicines.takeMedicine": "‡§¶‡§µ‡§æ ‡§≤‡•á‡§Ç",
    "medicines.skipDose": "‡§ñ‡•Å‡§∞‡§æ‡§ï ‡§õ‡•ã‡§°‡§º‡•á‡§Ç",
    "medicines.dosage": "‡§ñ‡•Å‡§∞‡§æ‡§ï",
    "medicines.frequency": "‡§Ü‡§µ‡•É‡§§‡•ç‡§§‡§ø",
    "medicines.nextDose": "‡§Ö‡§ó‡§≤‡•Ä ‡§ñ‡•Å‡§∞‡§æ‡§ï",

    // Health
    "health.title": "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä",
    "health.vitals": "‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§Ç‡§ï‡•á‡§§",
    "health.activity": "‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø",
    "health.insights": "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø",
    "health.addWater": "‡§™‡§æ‡§®‡•Ä ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
    "health.goal": "‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø",
    "health.achieved": "‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§",

    // AI Chat
    "chat.title": "AI ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï",
    "chat.placeholder": "‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø, ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç ‡§Ø‡§æ ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡•á‡§Ç...",
    "chat.scanPrescription": "‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡•á‡§Ç",
    "chat.voiceInput": "‡§Ü‡§µ‡§æ‡§ú ‡§á‡§®‡§™‡•Å‡§ü",
    "chat.listening": "‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•à...",
    "chat.processing": "‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£...",

    // Common
    "common.save": "‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç",
    "common.cancel": "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    "common.delete": "‡§π‡§ü‡§æ‡§è‡§Ç",
    "common.edit": "‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
    "common.loading": "‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...",
    "common.error": "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
    "common.success": "‡§∏‡§´‡§≤‡§§‡§æ",
    "common.today": "‡§Ü‡§ú",
    "common.tomorrow": "‡§ï‡§≤",
    "common.yesterday": "‡§ï‡§≤",
  },
  kn: {
    // Navigation
    "nav.dashboard": "‡≤°‡≥ç‡≤Ø‡≤æ‡≤∂‡≥ç‚Äå‡≤¨‡≥ã‡≤∞‡≥ç‡≤°‡≥ç",
    "nav.medicines": "‡≤î‡≤∑‡≤ß‡≤ø‡≤ó‡≤≥‡≥Å",
    "nav.health": "‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø",
    "nav.appointments": "‡≤Ö‡≤™‡≤æ‡≤Ø‡≤ø‡≤Ç‡≤ü‡≥ç‚Äå‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç‚Äå‡≤ó‡≤≥‡≥Å",
    "nav.chat": "AI ‡≤∏‡≤π‡≤æ‡≤Ø‡≤ï",
    "nav.profile": "‡≤™‡≥ç‡≤∞‡≥ä‡≤´‡≥à‡≤≤‡≥ç",

    // Dashboard
    "dashboard.title": "‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤°‡≥ç‡≤Ø‡≤æ‡≤∂‡≥ç‚Äå‡≤¨‡≥ã‡≤∞‡≥ç‡≤°‡≥ç",
    "dashboard.welcome": "‡≤Æ‡≤∞‡≤≥‡≤ø ‡≤∏‡≥ç‡≤µ‡≤æ‡≤ó‡≤§",
    "dashboard.todaysMedicines": "‡≤á‡≤Ç‡≤¶‡≤ø‡≤® ‡≤î‡≤∑‡≤ß‡≤ø‡≤ó‡≤≥‡≥Å",
    "dashboard.waterIntake": "‡≤®‡≥Ä‡≤∞‡≤ø‡≤® ‡≤∏‡≥á‡≤µ‡≤®‡≥Ü",
    "dashboard.heartRate": "‡≤π‡≥É‡≤¶‡≤Ø ‡≤¨‡≤°‡≤ø‡≤§",
    "dashboard.steps": "‡≤π‡≥Ü‡≤ú‡≥ç‡≤ú‡≥Ü‡≤ó‡≤≥‡≥Å",
    "dashboard.upcomingAppointment": "‡≤Æ‡≥Å‡≤Ç‡≤¨‡≤∞‡≥Å‡≤µ ‡≤Ö‡≤™‡≤æ‡≤Ø‡≤ø‡≤Ç‡≤ü‡≥ç‚Äå‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç",
    "dashboard.scheduleAppointment": "‡≤Ö‡≤™‡≤æ‡≤Ø‡≤ø‡≤Ç‡≤ü‡≥ç‚Äå‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤®‡≤ø‡≤ó‡≤¶‡≤ø‡≤™‡≤°‡≤ø‡≤∏‡≤ø",

    // Medicines
    "medicines.title": "‡≤î‡≤∑‡≤ß‡≤ø ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≤∞‡≥ç",
    "medicines.addMedicine": "‡≤î‡≤∑‡≤ß‡≤ø ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø",
    "medicines.takeMedicine": "‡≤î‡≤∑‡≤ß‡≤ø ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø",
    "medicines.skipDose": "‡≤°‡≥ã‡≤∏‡≥ç ‡≤¨‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å‡≤¨‡≤ø‡≤°‡≤ø",
    "medicines.dosage": "‡≤°‡≥ã‡≤∏‡≥á‡≤ú‡≥ç",
    "medicines.frequency": "‡≤Ü‡≤µ‡≤∞‡≥ç‡≤§‡≤®‡≥Ü",
    "medicines.nextDose": "‡≤Æ‡≥Å‡≤Ç‡≤¶‡≤ø‡≤® ‡≤°‡≥ã‡≤∏‡≥ç",

    // Health
    "health.title": "‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤Æ‡≥á‡≤≤‡≥ç‡≤µ‡≤ø‡≤ö‡≤æ‡≤∞‡≤£‡≥Ü",
    "health.vitals": "‡≤™‡≥ç‡≤∞‡≤Æ‡≥Å‡≤ñ ‡≤ö‡≤ø‡≤π‡≥ç‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å",
    "health.activity": "‡≤ö‡≤ü‡≥Å‡≤µ‡≤ü‡≤ø‡≤ï‡≥Ü",
    "health.insights": "‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤í‡≤≥‡≤®‡≥ã‡≤ü‡≤ó‡≤≥‡≥Å",
    "health.addWater": "‡≤®‡≥Ä‡≤∞‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø",
    "health.goal": "‡≤ó‡≥Å‡≤∞‡≤ø",
    "health.achieved": "‡≤∏‡≤æ‡≤ß‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü",

    // AI Chat
    "chat.title": "AI ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤∏‡≤π‡≤æ‡≤Ø‡≤ï",
    "chat.placeholder": "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø, ‡≤î‡≤∑‡≤ß‡≤ø‡≤ó‡≤≥ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤ï‡≥á‡≤≥‡≤ø ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤™‡≥ç‡≤∞‡≤ø‡≤∏‡≥ç‡≤ï‡≥ç‡≤∞‡≤ø‡≤™‡≥ç‡≤∑‡≤®‡≥ç ‡≤∏‡≥ç‡≤ï‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø...",
    "chat.scanPrescription": "‡≤™‡≥ç‡≤∞‡≤ø‡≤∏‡≥ç‡≤ï‡≥ç‡≤∞‡≤ø‡≤™‡≥ç‡≤∑‡≤®‡≥ç ‡≤∏‡≥ç‡≤ï‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø",
    "chat.voiceInput": "‡≤ß‡≥ç‡≤µ‡≤®‡≤ø ‡≤á‡≤®‡≥ç‚Äå‡≤™‡≥Å‡≤ü‡≥ç",
    "chat.listening": "‡≤ï‡≥á‡≤≥‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...",
    "chat.processing": "‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...",

    // Common
    "common.save": "‡≤â‡≤≥‡≤ø‡≤∏‡≤ø",
    "common.cancel": "‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø",
    "common.delete": "‡≤Ö‡≤≥‡≤ø‡≤∏‡≤ø",
    "common.edit": "‡≤∏‡≤Ç‡≤™‡≤æ‡≤¶‡≤ø‡≤∏‡≤ø",
    "common.loading": "‡≤≤‡≥ã‡≤°‡≥ç ‡≤Ü‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...",
    "common.error": "‡≤¶‡≥ã‡≤∑",
    "common.success": "‡≤Ø‡≤∂‡≤∏‡≥ç‡≤∏‡≥Å",
    "common.today": "‡≤á‡≤Ç‡≤¶‡≥Å",
    "common.tomorrow": "‡≤®‡≤æ‡≤≥‡≥Ü",
    "common.yesterday": "‡≤®‡≤ø‡≤®‡≥ç‡≤®‡≥Ü",
  },
  it: {
    // Navigation
    "nav.dashboard": "Dashboard",
    "nav.medicines": "Medicinali",
    "nav.health": "Salute",
    "nav.appointments": "Appuntamenti",
    "nav.chat": "Assistente IA",
    "nav.profile": "Profilo",

    // Dashboard
    "dashboard.title": "Dashboard Salute",
    "dashboard.welcome": "Bentornato",
    "dashboard.todaysMedicines": "Medicinali di oggi",
    "dashboard.waterIntake": "Assunzione d'acqua",
    "dashboard.heartRate": "Frequenza cardiaca",
    "dashboard.steps": "Passi",
    "dashboard.upcomingAppointment": "Prossimo appuntamento",
    "dashboard.scheduleAppointment": "Programma appuntamento",

    // Medicines
    "medicines.title": "Tracker Medicinali",
    "medicines.addMedicine": "Aggiungi medicinale",
    "medicines.takeMedicine": "Prendi medicinale",
    "medicines.skipDose": "Salta dose",
    "medicines.dosage": "Dosaggio",
    "medicines.frequency": "Frequenza",
    "medicines.nextDose": "Prossima dose",

    // Health
    "health.title": "Monitoraggio Salute",
    "health.vitals": "Segni vitali",
    "health.activity": "Attivit√†",
    "health.insights": "Approfondimenti salute",
    "health.addWater": "Aggiungi acqua",
    "health.goal": "Obiettivo",
    "health.achieved": "Raggiunto",

    // AI Chat
    "chat.title": "Assistente Salute IA",
    "chat.placeholder": "Chiedimi della tua salute, medicinali, o scansiona una prescrizione...",
    "chat.scanPrescription": "Scansiona prescrizione",
    "chat.voiceInput": "Input vocale",
    "chat.listening": "Ascolto...",
    "chat.processing": "Elaborazione...",

    // Common
    "common.save": "Salva",
    "common.cancel": "Annulla",
    "common.delete": "Elimina",
    "common.edit": "Modifica",
    "common.loading": "Caricamento...",
    "common.error": "Errore",
    "common.success": "Successo",
    "common.today": "Oggi",
    "common.tomorrow": "Domani",
    "common.yesterday": "Ieri",
  },
}

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [currentLanguage, setCurrentLanguage] = useState<Language>(languages[0])
  const [isSupported, setIsSupported] = useState(false)

  useEffect(() => {
    // Check if speech synthesis is supported
    setIsSupported("speechSynthesis" in window)

    // Load saved language preference
    const savedLang = localStorage.getItem("preferred-language")
    if (savedLang) {
      const lang = languages.find((l) => l.code === savedLang)
      if (lang) setCurrentLanguage(lang)
    }
  }, [])

  const setLanguage = (language: Language) => {
    setCurrentLanguage(language)
    localStorage.setItem("preferred-language", language.code)
  }

  const translate = (key: string): string => {
    return translations[currentLanguage.code]?.[key] || translations.en[key] || key
  }

  const speak = (text: string) => {
    if (!isSupported) return

    // Cancel any ongoing speech
    window.speechSynthesis.cancel()

    const utterance = new SpeechSynthesisUtterance(text)
    utterance.lang = currentLanguage.code
    utterance.rate = 0.9
    utterance.pitch = 1
    utterance.volume = 0.8

    // Try to find a voice for the current language
    const voices = window.speechSynthesis.getVoices()
    const voice = voices.find((v) => v.lang.startsWith(currentLanguage.code))
    if (voice) utterance.voice = voice

    window.speechSynthesis.speak(utterance)
  }

  return (
    <LanguageContext.Provider
      value={{
        currentLanguage,
        setLanguage,
        translate,
        speak,
        isSupported,
        languages,
      }}
    >
      {children}
    </LanguageContext.Provider>
  )
}

export function useLanguage() {
  const context = useContext(LanguageContext)
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider")
  }
  return context
}
